#ifndef STREAMBUF
#define STREAMBUF

#include <ios>
#include <locale>
#include <string>

// std namespace
namespace std
{

// Base buffer class for streams
template <class charT, class traits = char_traits<charT>>
class basic_streambuf
{
public:
    // charT
    typedef charT char_type;
    // the program is ill-formed if Traits::char_type is not CharT.
    typedef traits traits_type; 
    // traits::int_type
    typedef typename traits::int_type int_type;
    // traits::pos_type
    typedef typename traits::pos_type pos_type;
    // traits::off_type
    typedef typename traits::off_type off_type;

    // dectructor
    ~basic_streambuf() {}

    // invokes imbue()
    locale pubimbue(const locale &loc) {}
    // obtains a copy of the associated locale
    locale getloc() const {}
    // invokes setbuf()
    basic_streambuf<charT, traits> *pubsetbuf(char_type *s, streamsize n) {}
    // invokes seekoff()
    pos_type pubseekoff(off_type off, ios_base::seekdir dir, ios_base::openmode which = ios_base::in | ios_base::out) {}
    // invokes seekpos()
    pos_type pubseekpos(pos_type pos, ios_base::openmode which = ios_base::in | ios_base::out);
    // invokes sync()
    int pubsync() {}
    // obtains the number of characters immediately available in the get area
    streamsize in_avail() {}
    // advances the input sequence, then reads one character without advancing again
    int_type snextc() {}
    // reads one character from the input sequence and advances the sequence
    int_type sbumpc() {}
    // reads one character from the input sequence without advancing the sequence
    int_type sgetc() {}
    // invokes xsgetn()
    streamsize sgetn(char_type *s, streamsize count) {}
    // writes one character to the put area and advances the next pointer
    int_type sputc(char_type ch) {}
    // invokes xsputn()
    streamsize sputn(const char_type *s, streamsize count) {}
    // puts one character back in the input sequence
    int_type sputbackc(char_type c) {}
    // moves the next pointer in the input sequence back by one
    int_type sungetc() {}
protected:
    basic_streambuf(){};
    basic_streambuf(const basic_streambuf &rhs) {}
};

} // namespace std

#endif // STREAMBUF