#ifndef IOS
#define IOS

// std namespace
namespace std
{
// stream size
typedef long long streamsize;

// Base class for streams
class ios_base
{
public:
    // Type for stream opening mode flags
    typedef int openmode;
    // (append) Set the stream's position indicator to the end of the stream before each output operation.
    static constexpr openmode app = 0x00000001;
    // (at end) Set the stream's position indicator to the end of the stream on opening.
    static constexpr openmode ate = 0x00000002;
    // (binary) Consider stream as binary rather than text.
    static constexpr openmode binary = 0x00000004;
    // (input) Allow input operations on the stream.
    static constexpr openmode in = 0x00000008;
    // (output) Allow output operations on the stream.
    static constexpr openmode out = 0x00000010;
    // (truncate) Any current content is discarded, assuming a length of zero on opening.
    static constexpr openmode trunc = 0x00000020;

    // Specifies available formatting flags
    typedef int fmtflags;
    // use decimal base for integer I/O: see std::dec
    static constexpr fmtflags dec = 0x00000001;
    // use octal base for integer I/O: see std::oct
    static constexpr fmtflags oct = 0x00000002;
    // use hexadecimal base for integer I/O: see std::hex
    static constexpr fmtflags hex = 0x00000004;
    // dec|oct|hex. Useful for masking operations
    static constexpr fmtflags basefield = dec | oct | hex;
    // left adjustment (adds fill characters to the right): see std::left
    static constexpr fmtflags left = 0x00000008;
    // right adjustment (adds fill characters to the left): see std::right
    static constexpr fmtflags right = 0x00000010;
    // internal adjustment (adds fill characters to the internal designated point): see std::internal
    static constexpr fmtflags internal = 0x00000020;
    // left|right|internal. Useful for masking operations
    static constexpr fmtflags adjustfield = left | right | internal;
    // generate floating point types using scientific notation, or hex notation if combined with fixed: see std::scientific
    static constexpr fmtflags scientific = 0x00000040;
    // generate floating point types using fixed notation, or hex notation if combined with scientific: see std::fixed
    static constexpr fmtflags fixed = 0x00000080;
    // scientific|fixed. Useful for masking operations
    static constexpr fmtflags floatfield = scientific | fixed;
    // insert and extract bool type in alphanumeric format: see std::boolalpha
    static constexpr fmtflags boolalpha = 0x00000100;
    // generate a prefix indicating the numeric base for integer output, require the currency indicator in monetary I/O: see std::showbase
    static constexpr fmtflags showbase = 0x00000200;
    // generate a decimal-point character unconditionally for floating-point number output: see std::showpoint
    static constexpr fmtflags showpoint = 0x00000400;
    // generate a + character for non-negative numeric output: see std::showpos
    static constexpr fmtflags showpos = 0x00000800;
    // skip leading whitespace before certain input operations: see std::skipws
    static constexpr fmtflags skipws = 0x00001000;
    // flush the output after each output operation: see std::unitbuf
    static constexpr fmtflags unitbuf = 0x00002000;
    // replace certain lowercase letters with their uppercase equivalents in certain output operations: see std::uppercase
    static constexpr fmtflags uppercase = 0x00004000;

    // Specifies stream state flags
    typedef int iostate;
    // no error
    static constexpr iostate goodbit = 0x00000000;
    // 	irrecoverable stream error
    static constexpr iostate badbit = 0x00000001;
    // input/output operation failed (formatting or extraction error)
    static constexpr iostate failbit = 0x00000002;
    // associated input sequence has reached end-of-file
    static constexpr iostate eofbit = 0x00000004;

    // Type for stream seeking direction flag
    typedef int seekdir;
    // the beginning of a stream
    static constexpr seekdir beg = 0x00000000;
    // the ending of a stream
    static constexpr seekdir end = 0x00000001;
    // the current position of stream position indicator
    static constexpr seekdir cur = 0x00000002;

    // Specifies the event type which is passed to functions registered by register_callback() on specific events
    enum event
    {
        erase_event,  // issued on ~ios_base() or basic_ios::copyfmt() (before the copy of members takes place)
        imbue_event,  // issued on imbue()
        copyfmt_event // issued on basic_ios::copyfmt() (after the copy of members takes place, but before the exception settings are copied)
    };

    // The type of function callbacks that can be registered using register_callback() to be called on specific events.
    typedef void (*event_callback)(event type, ios_base &ios, int index);

public:
    ios_base(const ios_base &) = delete;
    // virtual ~ios_base() {}

protected:
    ios_base() {}
};

} // namespace std

#include <streambuf>

// std namespace
namespace std
{
// Base class for streams (type-dependent components)
template <class charT, class traits = char_traits<charT>>
class basic_ios : public ios_base
{
public:
    // charT
    typedef charT char_type;
    // the program is ill-formed if Traits::char_type is not CharT.
    typedef traits traits_type;
    // traits::int_type
    typedef typename traits::int_type int_type;
    // traits::pos_type
    typedef typename traits::pos_type pos_type;
    // traits::off_type
    typedef typename traits::off_type off_type;

protected:
    // handle to basic stream buffer
    std::basic_streambuf<charT, traits> *m_sb = nullptr;

public:
    // constructors
    basic_ios(const basic_ios &) = delete;
    explicit basic_ios(std::basic_streambuf<charT, traits> *sb) : m_sb(sb) {}
    // virtual ~basic_ios() {}

protected:
    // constructor
    basic_ios() {}

protected:
    // initializes a default-constructed std::basic_ios
    void init(std::basic_streambuf<charT, traits> *sb) {}
    // moves from another std::basic_ios except for rdbuf
    void move(basic_ios &other) {}
    void move(basic_ios &&other) {}
    // swaps with another std::basic_ios except for rdbuf
    void swap(basic_ios &other) noexcept {}
    // replaces the rdbuf without clearing its error state
    void set_rdbuf(std::basic_streambuf<charT, traits> *sb) {}
};

} // namespace std

#endif // IOS