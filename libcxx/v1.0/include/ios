#ifndef IOS
#define IOS

// std namespace
namespace std
{
// stream size
typedef long long streamsize;

// Base class for streams
class ios_base
{
public:
    // Type for stream opening mode flags
    typedef long long openmode;

    // (append) Set the stream's position indicator to the end of the stream before each output operation.
    static const openmode app = 0x00000001;
    // (at end) Set the stream's position indicator to the end of the stream on opening.
    static const openmode ate = 0x00000002;
    // (binary) Consider stream as binary rather than text.
    static const openmode binary = 0x00000004;
    // (input) Allow input operations on the stream.
    static const openmode in = 0x00000008;
    // (output) Allow output operations on the stream.
    static const openmode out = 0x00000010;
    // (truncate) Any current content is discarded, assuming a length of zero on opening.
    static const openmode trunc = 0x00000020;

    // Type for stream seeking direction flag
    enum seekdir
    {
        // beginning of sequence.
        beg,
        // current position within sequence.
        cur,
        // end of sequence.
        end
    };

    ios_base(const ios_base &) = delete;
    // virtual ~ios_base() {}

protected:
    ios_base() {}
};
} // namespace std

#include <streambuf>

namespace std
{
// Base class for streams (type-dependent components)
template <class charT, class traits = char_traits<charT>>
class basic_ios : public ios_base
{
protected:
    // handle to basic stream buffer
    std::basic_streambuf<charT, traits> *m_sb = nullptr;

public:
    basic_ios(const basic_ios &) = delete;
    explicit basic_ios(std::basic_streambuf<charT, traits> *sb)
        : m_sb(sb) {}
    // virtual ~basic_ios() {}

protected:
    basic_ios() {}
};

} // namespace std

#endif // IOS